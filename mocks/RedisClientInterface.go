// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import service "github.com/APTrust/preservation-services/models/service"

// RedisClientInterface is an autogenerated mock type for the RedisClientInterface type
type RedisClientInterface struct {
	mock.Mock
}

// IngestFileDelete provides a mock function with given fields: workItemId, fileIdentifier
func (_m *RedisClientInterface) IngestFileDelete(workItemId int, fileIdentifier string) error {
	ret := _m.Called(workItemId, fileIdentifier)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(workItemId, fileIdentifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IngestFileGet provides a mock function with given fields: workItemId, fileIdentifier
func (_m *RedisClientInterface) IngestFileGet(workItemId int, fileIdentifier string) (*service.IngestFile, error) {
	ret := _m.Called(workItemId, fileIdentifier)

	var r0 *service.IngestFile
	if rf, ok := ret.Get(0).(func(int, string) *service.IngestFile); ok {
		r0 = rf(workItemId, fileIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.IngestFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(workItemId, fileIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IngestFileSave provides a mock function with given fields: workItemId, f
func (_m *RedisClientInterface) IngestFileSave(workItemId int, f *service.IngestFile) error {
	ret := _m.Called(workItemId, f)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *service.IngestFile) error); ok {
		r0 = rf(workItemId, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IngestObjectDelete provides a mock function with given fields: workItemId, objIdentifier
func (_m *RedisClientInterface) IngestObjectDelete(workItemId int, objIdentifier string) error {
	ret := _m.Called(workItemId, objIdentifier)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(workItemId, objIdentifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IngestObjectGet provides a mock function with given fields: workItemId, objIdentifier
func (_m *RedisClientInterface) IngestObjectGet(workItemId int, objIdentifier string) (*service.IngestObject, error) {
	ret := _m.Called(workItemId, objIdentifier)

	var r0 *service.IngestObject
	if rf, ok := ret.Get(0).(func(int, string) *service.IngestObject); ok {
		r0 = rf(workItemId, objIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.IngestObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(workItemId, objIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IngestObjectSave provides a mock function with given fields: workItemId, obj
func (_m *RedisClientInterface) IngestObjectSave(workItemId int, obj *service.IngestObject) error {
	ret := _m.Called(workItemId, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *service.IngestObject) error); ok {
		r0 = rf(workItemId, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *RedisClientInterface) Ping() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
