// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import encrypt "github.com/minio/minio-go/v6/pkg/encrypt"
import http "net/http"
import io "io"
import minio "github.com/minio/minio-go/v6"
import mock "github.com/stretchr/testify/mock"

// MinioClientInterface is an autogenerated mock type for the MinioClientInterface type
type MinioClientInterface struct {
	mock.Mock
}

// AbortMultipartUpload provides a mock function with given fields: bucket, object, uploadID
func (_m *MinioClientInterface) AbortMultipartUpload(bucket string, object string, uploadID string) error {
	ret := _m.Called(bucket, object, uploadID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(bucket, object, uploadID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AbortMultipartUploadWithContext provides a mock function with given fields: ctx, bucket, object, uploadID
func (_m *MinioClientInterface) AbortMultipartUploadWithContext(ctx context.Context, bucket string, object string, uploadID string) error {
	ret := _m.Called(ctx, bucket, object, uploadID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, bucket, object, uploadID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteMultipartUpload provides a mock function with given fields: bucket, object, uploadID, parts
func (_m *MinioClientInterface) CompleteMultipartUpload(bucket string, object string, uploadID string, parts []minio.CompletePart) (string, error) {
	ret := _m.Called(bucket, object, uploadID, parts)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, []minio.CompletePart) string); ok {
		r0 = rf(bucket, object, uploadID, parts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []minio.CompletePart) error); ok {
		r1 = rf(bucket, object, uploadID, parts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteMultipartUploadWithContext provides a mock function with given fields: ctx, bucket, object, uploadID, parts
func (_m *MinioClientInterface) CompleteMultipartUploadWithContext(ctx context.Context, bucket string, object string, uploadID string, parts []minio.CompletePart) (string, error) {
	ret := _m.Called(ctx, bucket, object, uploadID, parts)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []minio.CompletePart) string); ok {
		r0 = rf(ctx, bucket, object, uploadID, parts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []minio.CompletePart) error); ok {
		r1 = rf(ctx, bucket, object, uploadID, parts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyObject provides a mock function with given fields: sourceBucket, sourceObject, destBucket, destObject, metadata
func (_m *MinioClientInterface) CopyObject(sourceBucket string, sourceObject string, destBucket string, destObject string, metadata map[string]string) (minio.ObjectInfo, error) {
	ret := _m.Called(sourceBucket, sourceObject, destBucket, destObject, metadata)

	var r0 minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string) minio.ObjectInfo); ok {
		r0 = rf(sourceBucket, sourceObject, destBucket, destObject, metadata)
	} else {
		r0 = ret.Get(0).(minio.ObjectInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, map[string]string) error); ok {
		r1 = rf(sourceBucket, sourceObject, destBucket, destObject, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyObjectPart provides a mock function with given fields: srcBucket, srcObject, destBucket, destObject, uploadID, partID, startOffset, length, metadata
func (_m *MinioClientInterface) CopyObjectPart(srcBucket string, srcObject string, destBucket string, destObject string, uploadID string, partID int, startOffset int64, length int64, metadata map[string]string) (minio.CompletePart, error) {
	ret := _m.Called(srcBucket, srcObject, destBucket, destObject, uploadID, partID, startOffset, length, metadata)

	var r0 minio.CompletePart
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, int, int64, int64, map[string]string) minio.CompletePart); ok {
		r0 = rf(srcBucket, srcObject, destBucket, destObject, uploadID, partID, startOffset, length, metadata)
	} else {
		r0 = ret.Get(0).(minio.CompletePart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, int, int64, int64, map[string]string) error); ok {
		r1 = rf(srcBucket, srcObject, destBucket, destObject, uploadID, partID, startOffset, length, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyObjectPartWithContext provides a mock function with given fields: ctx, srcBucket, srcObject, destBucket, destObject, uploadID, partID, startOffset, length, metadata
func (_m *MinioClientInterface) CopyObjectPartWithContext(ctx context.Context, srcBucket string, srcObject string, destBucket string, destObject string, uploadID string, partID int, startOffset int64, length int64, metadata map[string]string) (minio.CompletePart, error) {
	ret := _m.Called(ctx, srcBucket, srcObject, destBucket, destObject, uploadID, partID, startOffset, length, metadata)

	var r0 minio.CompletePart
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, int, int64, int64, map[string]string) minio.CompletePart); ok {
		r0 = rf(ctx, srcBucket, srcObject, destBucket, destObject, uploadID, partID, startOffset, length, metadata)
	} else {
		r0 = ret.Get(0).(minio.CompletePart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, int, int64, int64, map[string]string) error); ok {
		r1 = rf(ctx, srcBucket, srcObject, destBucket, destObject, uploadID, partID, startOffset, length, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyObjectWithContext provides a mock function with given fields: ctx, sourceBucket, sourceObject, destBucket, destObject, metadata
func (_m *MinioClientInterface) CopyObjectWithContext(ctx context.Context, sourceBucket string, sourceObject string, destBucket string, destObject string, metadata map[string]string) (minio.ObjectInfo, error) {
	ret := _m.Called(ctx, sourceBucket, sourceObject, destBucket, destObject, metadata)

	var r0 minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, map[string]string) minio.ObjectInfo); ok {
		r0 = rf(ctx, sourceBucket, sourceObject, destBucket, destObject, metadata)
	} else {
		r0 = ret.Get(0).(minio.ObjectInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, map[string]string) error); ok {
		r1 = rf(ctx, sourceBucket, sourceObject, destBucket, destObject, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FPutObject provides a mock function with given fields: bucketName, objectName, filePath, opts
func (_m *MinioClientInterface) FPutObject(bucketName string, objectName string, filePath string, opts minio.PutObjectOptions) (int64, error) {
	ret := _m.Called(bucketName, objectName, filePath, opts)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string, string, minio.PutObjectOptions) int64); ok {
		r0 = rf(bucketName, objectName, filePath, opts)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, minio.PutObjectOptions) error); ok {
		r1 = rf(bucketName, objectName, filePath, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketPolicy provides a mock function with given fields: bucket
func (_m *MinioClientInterface) GetBucketPolicy(bucket string) (string, error) {
	ret := _m.Called(bucket)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(bucket)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObject provides a mock function with given fields: bucketName, objectName, opts
func (_m *MinioClientInterface) GetObject(bucketName string, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	ret := _m.Called(bucketName, objectName, opts)

	var r0 *minio.Object
	if rf, ok := ret.Get(0).(func(string, string, minio.GetObjectOptions) *minio.Object); ok {
		r0 = rf(bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectWithContext provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioClientInterface) GetObjectWithContext(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions) (io.ReadCloser, minio.ObjectInfo, http.Header, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) io.ReadCloser); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 minio.ObjectInfo
	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) minio.ObjectInfo); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Get(1).(minio.ObjectInfo)
	}

	var r2 http.Header
	if rf, ok := ret.Get(2).(func(context.Context, string, string, minio.GetObjectOptions) http.Header); ok {
		r2 = rf(ctx, bucketName, objectName, opts)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(http.Header)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r3 = rf(ctx, bucketName, objectName, opts)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ListMultipartUploads provides a mock function with given fields: bucket, prefix, keyMarker, uploadIDMarker, delimiter, maxUploads
func (_m *MinioClientInterface) ListMultipartUploads(bucket string, prefix string, keyMarker string, uploadIDMarker string, delimiter string, maxUploads int) (minio.ListMultipartUploadsResult, error) {
	ret := _m.Called(bucket, prefix, keyMarker, uploadIDMarker, delimiter, maxUploads)

	var r0 minio.ListMultipartUploadsResult
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, int) minio.ListMultipartUploadsResult); ok {
		r0 = rf(bucket, prefix, keyMarker, uploadIDMarker, delimiter, maxUploads)
	} else {
		r0 = ret.Get(0).(minio.ListMultipartUploadsResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, int) error); ok {
		r1 = rf(bucket, prefix, keyMarker, uploadIDMarker, delimiter, maxUploads)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjectParts provides a mock function with given fields: bucket, object, uploadID, partNumberMarker, maxParts
func (_m *MinioClientInterface) ListObjectParts(bucket string, object string, uploadID string, partNumberMarker int, maxParts int) (minio.ListObjectPartsResult, error) {
	ret := _m.Called(bucket, object, uploadID, partNumberMarker, maxParts)

	var r0 minio.ListObjectPartsResult
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) minio.ListObjectPartsResult); ok {
		r0 = rf(bucket, object, uploadID, partNumberMarker, maxParts)
	} else {
		r0 = ret.Get(0).(minio.ListObjectPartsResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(bucket, object, uploadID, partNumberMarker, maxParts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjects provides a mock function with given fields: bucket, prefix, marker, delimiter, maxKeys
func (_m *MinioClientInterface) ListObjects(bucket string, prefix string, marker string, delimiter string, maxKeys int) (minio.ListBucketResult, error) {
	ret := _m.Called(bucket, prefix, marker, delimiter, maxKeys)

	var r0 minio.ListBucketResult
	if rf, ok := ret.Get(0).(func(string, string, string, string, int) minio.ListBucketResult); ok {
		r0 = rf(bucket, prefix, marker, delimiter, maxKeys)
	} else {
		r0 = ret.Get(0).(minio.ListBucketResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, int) error); ok {
		r1 = rf(bucket, prefix, marker, delimiter, maxKeys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjectsV2 provides a mock function with given fields: bucketName, objectPrefix, continuationToken, fetchOwner, delimiter, maxkeys, startAfter
func (_m *MinioClientInterface) ListObjectsV2(bucketName string, objectPrefix string, continuationToken string, fetchOwner bool, delimiter string, maxkeys int, startAfter string) (minio.ListBucketV2Result, error) {
	ret := _m.Called(bucketName, objectPrefix, continuationToken, fetchOwner, delimiter, maxkeys, startAfter)

	var r0 minio.ListBucketV2Result
	if rf, ok := ret.Get(0).(func(string, string, string, bool, string, int, string) minio.ListBucketV2Result); ok {
		r0 = rf(bucketName, objectPrefix, continuationToken, fetchOwner, delimiter, maxkeys, startAfter)
	} else {
		r0 = ret.Get(0).(minio.ListBucketV2Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, bool, string, int, string) error); ok {
		r1 = rf(bucketName, objectPrefix, continuationToken, fetchOwner, delimiter, maxkeys, startAfter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMultipartUpload provides a mock function with given fields: bucket, object, opts
func (_m *MinioClientInterface) NewMultipartUpload(bucket string, object string, opts minio.PutObjectOptions) (string, error) {
	ret := _m.Called(bucket, object, opts)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, minio.PutObjectOptions) string); ok {
		r0 = rf(bucket, object, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, minio.PutObjectOptions) error); ok {
		r1 = rf(bucket, object, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketPolicy provides a mock function with given fields: bucket, bucketPolicy
func (_m *MinioClientInterface) PutBucketPolicy(bucket string, bucketPolicy string) error {
	ret := _m.Called(bucket, bucketPolicy)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bucket, bucketPolicy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutBucketPolicyWithContext provides a mock function with given fields: ctx, bucket, bucketPolicy
func (_m *MinioClientInterface) PutBucketPolicyWithContext(ctx context.Context, bucket string, bucketPolicy string) error {
	ret := _m.Called(ctx, bucket, bucketPolicy)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bucket, bucketPolicy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutObject provides a mock function with given fields: bucket, object, data, size, md5Base64, sha256Hex, metadata, sse
func (_m *MinioClientInterface) PutObject(bucket string, object string, data io.Reader, size int64, md5Base64 string, sha256Hex string, metadata map[string]string, sse encrypt.ServerSide) (minio.ObjectInfo, error) {
	ret := _m.Called(bucket, object, data, size, md5Base64, sha256Hex, metadata, sse)

	var r0 minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(string, string, io.Reader, int64, string, string, map[string]string, encrypt.ServerSide) minio.ObjectInfo); ok {
		r0 = rf(bucket, object, data, size, md5Base64, sha256Hex, metadata, sse)
	} else {
		r0 = ret.Get(0).(minio.ObjectInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, io.Reader, int64, string, string, map[string]string, encrypt.ServerSide) error); ok {
		r1 = rf(bucket, object, data, size, md5Base64, sha256Hex, metadata, sse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObjectPart provides a mock function with given fields: bucket, object, uploadID, partID, data, size, md5Base64, sha256Hex, sse
func (_m *MinioClientInterface) PutObjectPart(bucket string, object string, uploadID string, partID int, data io.Reader, size int64, md5Base64 string, sha256Hex string, sse encrypt.ServerSide) (minio.ObjectPart, error) {
	ret := _m.Called(bucket, object, uploadID, partID, data, size, md5Base64, sha256Hex, sse)

	var r0 minio.ObjectPart
	if rf, ok := ret.Get(0).(func(string, string, string, int, io.Reader, int64, string, string, encrypt.ServerSide) minio.ObjectPart); ok {
		r0 = rf(bucket, object, uploadID, partID, data, size, md5Base64, sha256Hex, sse)
	} else {
		r0 = ret.Get(0).(minio.ObjectPart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, io.Reader, int64, string, string, encrypt.ServerSide) error); ok {
		r1 = rf(bucket, object, uploadID, partID, data, size, md5Base64, sha256Hex, sse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObjectPartWithContext provides a mock function with given fields: ctx, bucket, object, uploadID, partID, data, size, md5Base64, sha256Hex, sse
func (_m *MinioClientInterface) PutObjectPartWithContext(ctx context.Context, bucket string, object string, uploadID string, partID int, data io.Reader, size int64, md5Base64 string, sha256Hex string, sse encrypt.ServerSide) (minio.ObjectPart, error) {
	ret := _m.Called(ctx, bucket, object, uploadID, partID, data, size, md5Base64, sha256Hex, sse)

	var r0 minio.ObjectPart
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, io.Reader, int64, string, string, encrypt.ServerSide) minio.ObjectPart); ok {
		r0 = rf(ctx, bucket, object, uploadID, partID, data, size, md5Base64, sha256Hex, sse)
	} else {
		r0 = ret.Get(0).(minio.ObjectPart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int, io.Reader, int64, string, string, encrypt.ServerSide) error); ok {
		r1 = rf(ctx, bucket, object, uploadID, partID, data, size, md5Base64, sha256Hex, sse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObjectWithContext provides a mock function with given fields: ctx, bucket, object, data, size, md5Base64, sha256Hex, metadata, sse
func (_m *MinioClientInterface) PutObjectWithContext(ctx context.Context, bucket string, object string, data io.Reader, size int64, md5Base64 string, sha256Hex string, metadata map[string]string, sse encrypt.ServerSide) (minio.ObjectInfo, error) {
	ret := _m.Called(ctx, bucket, object, data, size, md5Base64, sha256Hex, metadata, sse)

	var r0 minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, string, string, map[string]string, encrypt.ServerSide) minio.ObjectInfo); ok {
		r0 = rf(ctx, bucket, object, data, size, md5Base64, sha256Hex, metadata, sse)
	} else {
		r0 = ret.Get(0).(minio.ObjectInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, int64, string, string, map[string]string, encrypt.ServerSide) error); ok {
		r1 = rf(ctx, bucket, object, data, size, md5Base64, sha256Hex, metadata, sse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatObject provides a mock function with given fields: bucketName, objectName, opts
func (_m *MinioClientInterface) StatObject(bucketName string, objectName string, opts minio.StatObjectOptions) (minio.ObjectInfo, error) {
	ret := _m.Called(bucketName, objectName, opts)

	var r0 minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(string, string, minio.StatObjectOptions) minio.ObjectInfo); ok {
		r0 = rf(bucketName, objectName, opts)
	} else {
		r0 = ret.Get(0).(minio.ObjectInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, minio.StatObjectOptions) error); ok {
		r1 = rf(bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatObjectWithContext provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioClientInterface) StatObjectWithContext(ctx context.Context, bucketName string, objectName string, opts minio.StatObjectOptions) (minio.ObjectInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	var r0 minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.StatObjectOptions) minio.ObjectInfo); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		r0 = ret.Get(0).(minio.ObjectInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.StatObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
