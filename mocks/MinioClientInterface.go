// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import io "io"
import minio "github.com/minio/minio-go/v6"
import mock "github.com/stretchr/testify/mock"

import time "time"
import url "net/url"

// MinioClientInterface is an autogenerated mock type for the MinioClientInterface type
type MinioClientInterface struct {
	mock.Mock
}

// ComposeObject provides a mock function with given fields: dst, srcs
func (_m *MinioClientInterface) ComposeObject(dst minio.DestinationInfo, srcs []minio.SourceInfo) error {
	ret := _m.Called(dst, srcs)

	var r0 error
	if rf, ok := ret.Get(0).(func(minio.DestinationInfo, []minio.SourceInfo) error); ok {
		r0 = rf(dst, srcs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyObject provides a mock function with given fields: dst, src
func (_m *MinioClientInterface) CopyObject(dst minio.DestinationInfo, src minio.SourceInfo) error {
	ret := _m.Called(dst, src)

	var r0 error
	if rf, ok := ret.Get(0).(func(minio.DestinationInfo, minio.SourceInfo) error); ok {
		r0 = rf(dst, src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FGetObject provides a mock function with given fields: bucketName, objectName, filePath, opts
func (_m *MinioClientInterface) FGetObject(bucketName string, objectName string, filePath string, opts minio.GetObjectOptions) error {
	ret := _m.Called(bucketName, objectName, filePath, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, minio.GetObjectOptions) error); ok {
		r0 = rf(bucketName, objectName, filePath, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FGetObjectWithContext provides a mock function with given fields: ctx, bucketName, objectName, filePath, opts
func (_m *MinioClientInterface) FGetObjectWithContext(ctx context.Context, bucketName string, objectName string, filePath string, opts minio.GetObjectOptions) error {
	ret := _m.Called(ctx, bucketName, objectName, filePath, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, minio.GetObjectOptions) error); ok {
		r0 = rf(ctx, bucketName, objectName, filePath, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FPutObject provides a mock function with given fields: bucketName, objectName, filePath, opts
func (_m *MinioClientInterface) FPutObject(bucketName string, objectName string, filePath string, opts minio.PutObjectOptions) (int64, error) {
	ret := _m.Called(bucketName, objectName, filePath, opts)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string, string, minio.PutObjectOptions) int64); ok {
		r0 = rf(bucketName, objectName, filePath, opts)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, minio.PutObjectOptions) error); ok {
		r1 = rf(bucketName, objectName, filePath, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FPutObjectWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MinioClientInterface) FPutObjectWithContext(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 minio.PutObjectOptions) (int64, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, minio.PutObjectOptions) int64); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, minio.PutObjectOptions) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObject provides a mock function with given fields: bucketName, objectName, opts
func (_m *MinioClientInterface) GetObject(bucketName string, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	ret := _m.Called(bucketName, objectName, opts)

	var r0 *minio.Object
	if rf, ok := ret.Get(0).(func(string, string, minio.GetObjectOptions) *minio.Object); ok {
		r0 = rf(bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectRetention provides a mock function with given fields: bucketName, objectName, versionID
func (_m *MinioClientInterface) GetObjectRetention(bucketName string, objectName string, versionID string) (*minio.RetentionMode, *time.Time, error) {
	ret := _m.Called(bucketName, objectName, versionID)

	var r0 *minio.RetentionMode
	if rf, ok := ret.Get(0).(func(string, string, string) *minio.RetentionMode); ok {
		r0 = rf(bucketName, objectName, versionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.RetentionMode)
		}
	}

	var r1 *time.Time
	if rf, ok := ret.Get(1).(func(string, string, string) *time.Time); ok {
		r1 = rf(bucketName, objectName, versionID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*time.Time)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string) error); ok {
		r2 = rf(bucketName, objectName, versionID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetObjectWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MinioClientInterface) GetObjectWithContext(_a0 context.Context, _a1 string, _a2 string, _a3 minio.GetObjectOptions) (*minio.Object, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *minio.Object
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) *minio.Object); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjects provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MinioClientInterface) ListObjects(_a0 string, _a1 string, _a2 bool, _a3 <-chan struct{}) <-chan minio.ObjectInfo {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 <-chan minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(string, string, bool, <-chan struct{}) <-chan minio.ObjectInfo); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan minio.ObjectInfo)
		}
	}

	return r0
}

// ListObjectsV2 provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MinioClientInterface) ListObjectsV2(_a0 string, _a1 string, _a2 bool, _a3 <-chan struct{}) <-chan minio.ObjectInfo {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 <-chan minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(string, string, bool, <-chan struct{}) <-chan minio.ObjectInfo); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan minio.ObjectInfo)
		}
	}

	return r0
}

// PresignedHeadObject provides a mock function with given fields: bucketName, objectName, expiry, reqParams
func (_m *MinioClientInterface) PresignedHeadObject(bucketName string, objectName string, expiry time.Duration, reqParams url.Values) (*url.URL, error) {
	ret := _m.Called(bucketName, objectName, expiry, reqParams)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(string, string, time.Duration, url.Values) *url.URL); ok {
		r0 = rf(bucketName, objectName, expiry, reqParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, time.Duration, url.Values) error); ok {
		r1 = rf(bucketName, objectName, expiry, reqParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PresignedPutObject provides a mock function with given fields: bucketName, objectName, expiry
func (_m *MinioClientInterface) PresignedPutObject(bucketName string, objectName string, expiry time.Duration) (*url.URL, error) {
	ret := _m.Called(bucketName, objectName, expiry)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) *url.URL); ok {
		r0 = rf(bucketName, objectName, expiry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, time.Duration) error); ok {
		r1 = rf(bucketName, objectName, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObject provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MinioClientInterface) PutObject(_a0 string, _a1 string, _a2 io.Reader, _a3 int64, _a4 minio.PutObjectOptions) (int64, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string, io.Reader, int64, minio.PutObjectOptions) int64); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, io.Reader, int64, minio.PutObjectOptions) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObjectRetention provides a mock function with given fields: bucketName, objectName, opts
func (_m *MinioClientInterface) PutObjectRetention(bucketName string, objectName string, opts minio.PutObjectRetentionOptions) error {
	ret := _m.Called(bucketName, objectName, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, minio.PutObjectRetentionOptions) error); ok {
		r0 = rf(bucketName, objectName, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutObjectWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *MinioClientInterface) PutObjectWithContext(_a0 context.Context, _a1 string, _a2 string, _a3 io.Reader, _a4 int64, _a5 minio.PutObjectOptions) (int64, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) int64); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveIncompleteUpload provides a mock function with given fields: bucketName, objectName
func (_m *MinioClientInterface) RemoveIncompleteUpload(bucketName string, objectName string) error {
	ret := _m.Called(bucketName, objectName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bucketName, objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveObject provides a mock function with given fields: bucketName, objectName
func (_m *MinioClientInterface) RemoveObject(bucketName string, objectName string) error {
	ret := _m.Called(bucketName, objectName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bucketName, objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveObjectWithOptions provides a mock function with given fields: bucketName, objectName, opts
func (_m *MinioClientInterface) RemoveObjectWithOptions(bucketName string, objectName string, opts minio.RemoveObjectOptions) error {
	ret := _m.Called(bucketName, objectName, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, minio.RemoveObjectOptions) error); ok {
		r0 = rf(bucketName, objectName, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveObjects provides a mock function with given fields: _a0, _a1
func (_m *MinioClientInterface) RemoveObjects(_a0 string, _a1 <-chan string) <-chan minio.RemoveObjectError {
	ret := _m.Called(_a0, _a1)

	var r0 <-chan minio.RemoveObjectError
	if rf, ok := ret.Get(0).(func(string, <-chan string) <-chan minio.RemoveObjectError); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan minio.RemoveObjectError)
		}
	}

	return r0
}

// RemoveObjectsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MinioClientInterface) RemoveObjectsWithContext(_a0 context.Context, _a1 string, _a2 <-chan string) <-chan minio.RemoveObjectError {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 <-chan minio.RemoveObjectError
	if rf, ok := ret.Get(0).(func(context.Context, string, <-chan string) <-chan minio.RemoveObjectError); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan minio.RemoveObjectError)
		}
	}

	return r0
}

// SelectObjectContent provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MinioClientInterface) SelectObjectContent(_a0 context.Context, _a1 string, _a2 string, _a3 minio.SelectObjectOptions) (*minio.SelectResults, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *minio.SelectResults
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.SelectObjectOptions) *minio.SelectResults); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.SelectResults)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.SelectObjectOptions) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatObject provides a mock function with given fields: bucketName, objectName, opts
func (_m *MinioClientInterface) StatObject(bucketName string, objectName string, opts minio.StatObjectOptions) (minio.ObjectInfo, error) {
	ret := _m.Called(bucketName, objectName, opts)

	var r0 minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(string, string, minio.StatObjectOptions) minio.ObjectInfo); ok {
		r0 = rf(bucketName, objectName, opts)
	} else {
		r0 = ret.Get(0).(minio.ObjectInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, minio.StatObjectOptions) error); ok {
		r1 = rf(bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatObjectWithContext provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioClientInterface) StatObjectWithContext(ctx context.Context, bucketName string, objectName string, opts minio.StatObjectOptions) (minio.ObjectInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	var r0 minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.StatObjectOptions) minio.ObjectInfo); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		r0 = ret.Get(0).(minio.ObjectInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.StatObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
